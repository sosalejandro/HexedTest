// <auto-generated/> 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime;

namespace HexedTest.Library.Domain.Tests;

public class BookTests
{
    [Fact]
    public void Create_Should_CreateAValidBook_WhenMethodIsCalled()
    {
        // Arrange
        Book book;

        // Act
        book = CreateBaseBook();

        // Assert
        Assert.NotNull(book);

        Assert.False(string.IsNullOrWhiteSpace(book.ISBN), "Book ISBN is invalid");
        Assert.False(string.IsNullOrWhiteSpace(book.Author), "Book Author is invalid");
        Assert.False(string.IsNullOrWhiteSpace(book.Title), "Book Title is invalid");
        Assert.False(book.YearPublished == default, "Book YearPublished is invalid");
        Assert.NotNull(book.Stock);
    }

    [Theory]    
    [InlineData("isbn", "author", "title", "")]
    [InlineData("isbn", "author", "", "")]
    [InlineData("isbn", "", "", "")]
    [InlineData("", "", "", "")]
    [InlineData("", "author", "title", "12/25/2015 12:00:00 AM")]
    [InlineData("isbn", "author", "", "12/25/2015 12:00:00 AM")]
    [InlineData("", "author", "", "12/25/2015 12:00:00 AM")]
    [InlineData("", "author", "", "")]
    [InlineData("", "", "title", "12/25/2015 12:00:00 AM")]
    [InlineData("", "author", "title", "")]
    [InlineData("isbn", "", "title", "12/25/2015 12:00:00 AM")]
    [InlineData("", "", "", "12/25/2015 12:00:00 AM")]  
    public void Create_Should_Throw_WhenInputsAreInvalid(
        string isbn,
        string author,
        string title,
        string datetime
        )
    {
        // Arrange
        DateTime yearPublished = default;        
        
        try
        {
            yearPublished = DateTime.Parse(datetime);          


            // Act & Assert
            Assert.Throws<InvalidBookStateException>(() => CreateBaseBook(yearPublished, isbn, author, title));
        }
        catch
        {
            Assert.Throws<InvalidBookStateException>(() => CreateBaseBook(yearPublished, isbn, author, title));
        }
    }

    [Fact]
    public void SetNewStock_Should_SetANewStockInstance()
    {
        // Arrange
        Book book = CreateBaseBook();
        int originalAmount = 2000;
        int copiesAmount = 11;
        BookStock stock = BookStock.Create(originalAmount, copiesAmount);
        

        // Act
        book.SetNewStock(
            BookStock.Create(originalAmount, copiesAmount));

        // Assert
        Assert.NotNull(stock);
        Assert.Equal(stock, book.Stock);
    }

    [Theory]
    [InlineData( 1)]
    [InlineData( 5)]
    [InlineData( 10000)]
    [InlineData( 0)]
    public void SetNewStock_Should_Throw_When_OriginalAmount_IsSetBelowZero(int copies)
    {
        // Arrange
        Book book = CreateBaseBook(original: 0, copies: copies);
        Action SetNewStock = () => book.SetNewStock(
               BookStock.Create(book.Stock.OriginalAmount - 1, book.Stock.CopiesAmount));
        
        // Act & Assert
        Assert.Throws<OutOfStockException>(() => SetNewStock());
        Assert.Equal(0, book.Stock.OriginalAmount);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(10000)]
    [InlineData(0)]
    public void SetNewStock_Should_Throw_When_CopiesAmount_IsSetBelowZero(int originals)
    {
        // Arrange
        Book book = CreateBaseBook(original: originals, copies: 0);
        Action SetNewStock = () => book.SetNewStock(
               BookStock.Create(book.Stock.OriginalAmount, book.Stock.CopiesAmount - 1));

        // Act & Assert
        Assert.Throws<OutOfStockException>(() => SetNewStock());
        Assert.Equal(0, book.Stock.CopiesAmount);
    }

    private static Book CreateBaseBook(string isbn = "978-1-0217-2611-7", int original = 15, int copies = 30)
    {

        string author = "Gaspar Noe";
        string title = "Black Swan";
        DateTime yearPubllished = DateTime.Now.AddYears(Random.Shared.Next(-60, -20));
        BookStock stock = BookStock.Create(original, copies);

        return Book.Create(isbn, author, title, yearPubllished, stock);
    }

    private static Book CreateBaseBook(
        DateTime yearPubllished,
        string isbn = "978-1-0217-2611-7",
        string author = "Gaspar Noe",
        string title = "Black Swan",
        int original = 15,
        int copies = 30)
    {

        BookStock stock = BookStock.Create(original, copies);


        return Book.Create(isbn, author, title, yearPubllished, stock);

    }
}

