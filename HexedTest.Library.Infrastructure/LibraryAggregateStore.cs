// <auto-generated/>
using HexedTest.Library.Infrastructure.Data;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HexedTest.Library.Infrastructure
{
    public class LibraryAggregateStore
    {
        private readonly CosmosClient cosmosClient;
        private readonly Container libraryContainer;

        public LibraryAggregateStore(IConfiguration configuration)
        {
            var connectionString = configuration["CosmosDb:ConnectionString"];
            var databaseId = configuration["CosmosDb:DatabaseId"];
            var containerId = configuration["CosmosDb:ContainerId"];

            var clientOptions = new CosmosClientOptions()
            {
                SerializerOptions = new CosmosSerializationOptions()
                {
                    PropertyNamingPolicy = CosmosPropertyNamingPolicy.CamelCase,
                }
            };

            cosmosClient = new CosmosClient(connectionString, clientOptions);
            libraryContainer = cosmosClient.GetContainer(databaseId, containerId);
        }

        public async Task<Domain.Entities.Library> LoadAsync()
        {
            var sqlQueryText = "SELECT * FROM c";
            var queryDefinition = new QueryDefinition(sqlQueryText);
            var queryResultSetIterator = libraryContainer.GetItemQueryIterator<CosmosEvent>(queryDefinition);
            List<CosmosEvent> allEvents = new();

            while (queryResultSetIterator.HasMoreResults)
            {
                FeedResponse<CosmosEvent> currentResultSet = await queryResultSetIterator.ReadNextAsync();
                foreach (CosmosEvent eventData in currentResultSet)
                {
                    allEvents.Add(eventData);
                }
            }

            IEnumerable<IDomainEvent> domainEvents = allEvents.Select(e =>
            {
                var assemblyQualifiedName = JsonConvert.DeserializeObject<string>(e.AssemblyQualifiedName);
                var eventType = Type.GetType(assemblyQualifiedName);
                var data = JsonConvert.DeserializeObject(e.Data, eventType);
                return data as IDomainEvent;
            });

            var aggregate = new Domain.Entities.Library();
            aggregate.Load(domainEvents);

            return aggregate;
        }
        public async Task SaveAsync(Domain.Entities.Library library)
        {
            if (library is null)
            {
                throw new ArgumentNullException(nameof(library));
            }

            var changes = library.GetChanges()
                .Select(e =>
                {
                    return new CosmosEvent(
                        Guid.NewGuid(),
                        e.GetType().Name,
                        JsonConvert.SerializeObject(e),
                        JsonConvert.SerializeObject(e.GetType().AssemblyQualifiedName)
                        );
                }).AsEnumerable();

            if(!changes.Any())
            {
                return;
            }

            foreach(var item in changes)
            {
                await libraryContainer.CreateItemAsync(item);
            }

            library.ClearChanges();
        }
    }
}
